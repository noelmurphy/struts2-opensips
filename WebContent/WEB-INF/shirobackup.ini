[main]
authc.loginUrl = /login.jsp
authc.successUrl  = /views/startpage.jsp
logout.redirectUrl = /login.jsp

# ------------------------
# Database

# Own Realm
jdbcRealm = net.codejava.framework.model.MyCustomRealm

# Sha256
sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
# base64 encoding, not hex in this example:
sha256Matcher.storedCredentialsHexEncoded = false
sha256Matcher.hashIterations = 1024

jdbcRealm.credentialsMatcher = $sha256Matcher

# User Query
# default is "select password from users where username = ?"
jdbcRealm.authenticationQuery = SELECT password, salt FROM User WHERE email = ?

# permissions
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.userRolesQuery = select roleName from UserRole where email = ?
jdbcRealm.permissionsQuery = select permission from RolesPermission where roleName = ?

[urls]
/login.jsp = authc
/app/users = ssl[8443],authc

[users]
# format: username = password, role1, role2, ..., roleN
root = secret,admin
# Connection 
ds = com.mysql.jdbc.jdbc2.optional.MysqlDataSource
ds.serverName = localhost
ds.user = root
ds.password = h1gg1ns
ds.databaseName = opensips
jdbcRealm.dataSource=$ds	

authc.usernameParam = email
authc.passwordParam = password
authc.failureKeyAttribute = shiroLoginFailure

# Use Built-in Chache Manager
builtInCacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $builtInCacheManager

securityManager.realms = $jdbcRealm

# -----------------------------------------------------------------------------
[urls]
/ExampleApp.html = authc, perms["portal:read"]
/Admin.html = authc, perms["admin:access"]